//Class based components provides us several life cycle methods, 
//which at various stages are invoke automatically telling us that component has reached that state

//constructor() -- when component gets start for construction

// componentDidMount() -- when component is successfully created then it gets called, we write this function to know weither our component is successfully created or not(there are some error or not)
//                     -- props will receive in this function

//componentDidUpdate() -- when we update the component then this function will get called

//componentWillUnmount() -- when component is going out of the screen then this function will get called

//<Navbar>Hello kajol</Navbar>  -- here 'Hello kajol' is children component and we can access it in component page like {props.children}

//List of events in react -- find it on google









Hooks (It is used in functional component)
//We can not update functional components using state. So there react hooks came to update screen for functional component.
//react hooks -- are some methods that provide state feature in functional component. 
//ex - useState(), 
//var [a, abc] = useState()  -- a is the property and abc is handler function to update the value of a

//useEffect() -- it is another hook method. Works similar to componentDidMount() and componentDidUpdate() methods of class component.
//Means whenever functional component is mounted and updated then this function will get call. 
    useEffect(()=>{
        alert('Mounted and Updated')
    })

// If we do not want to call useEffect() on update then we have to pass 2nd argument as blank array like below
    useEffect(()=>{
        alert('Mounted and Updated')
    },[])











//Passing method references between components 
var [user,setUser]=useState();
  function LoginDone(data){
    setUser(data)

  }
<Navbar user={user} /> -- in navbar.js -- {props.user}
<Login informlogin={LoginDone}/> -- in login.js -- {props.informlogin("kajol")}

// in above example data is going from login page to navbar.
//informlogin={LoginDone} -- Passing method references from app to login component




// conditional rendering -- rendering some element based on the condition



//Work flow of react - 1st index.html gets called -> index.js inside div id='root' app component gets created





//If you write alert("constructor") in constructor then you can see this alert comes 2 times
// -- bcoz rendering happens in 2 stagesand this is because of StrictMode(written in index.js), 
//1st stage(pre-rendering) - it checks that is there is any error or not
//2nd stage(rendering) - render data into DOM



//We need to make api hit to get response data
//url, method, requestObject - mandatory (requestObject structure should match the structure provided by api developer)
//responseObject - this we see it by ourself
//To make network calls we use a package called axios


How to use axios :

npm install axios
import axios
call axios() whenever you want to call an api


axios -- it accepts objects with minimus 2 or 3 keys
axios({method: "get", url: "apiurl"})
axios({method: "post", url: "apiurl", data:{} }) //key data is mandatory in post method












//If you find that useState/setState are not updating immediately, the answer is simple: they’re just queues(asyncronus nature).
//React useState and setState don’t make changes directly to the state object; 
//they create queues to optimize performance, which is why the changes don’t update immediately.


Solution for setState :
pass a callback function as 2nd parameter to the setState method and do all action inside that callback function.


Solution for useState :
let Hello = ()=>{
    setName('kajol')
    console.log("Name is inside setName : ",name) //undefined
}

useEffect(() => { //This hook function will only activate if the values in the list(dependencies) change. 
                  //Meas whenever value of [name] this list gets changed then only this function will get called.
    console.log("Name is inside useEffect : ",name) //kajol
  }, [name]);




//npm install react-router react-router-dom -> to install router

//Those component which are passed as a prop in route tag, route tag adds extra properties to them on routing






